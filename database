Users

id (INT, Primary Key)
name (VARCHAR(100))
email (VARCHAR(100), UNIQUE)
password (VARCHAR(255))
roles (ENUM('USER', 'MERCHANT', 'COURIER'))
username (VARCHAR(50))
phone_number (VARCHAR(20))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Merchants

id (INT, Primary Key)
name (VARCHAR(100))
owner_id (INT, Foreign Key to Users)
address (TEXT)
phone_number (VARCHAR(20))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Products

id (INT, Primary Key)
merchant_id (INT, Foreign Key to Merchants)
name (VARCHAR(100))
description (TEXT)
price (DECIMAL(10,2))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Orders

id (INT, Primary Key)
user_id (INT, Foreign Key to Users)
merchant_id (INT, Foreign Key to Merchants)
total_amount (DECIMAL(10,2))
payment_status (ENUM('PENDING', 'COMPLETED', 'FAILED'))
order_status (ENUM('PENDING', 'COMPLETED', 'CANCELED'))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Order_Items

id (INT, Primary Key)
order_id (INT, Foreign Key to Orders)
product_id (INT, Foreign Key to Products)
quantity (INT)
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Loyalty_Points

id (INT, Primary Key)
user_id (INT, Foreign Key to Users)
points (INT)
created_at (TIMESTAMP)
Couriers

id (INT, Primary Key)
user_id (INT, Foreign Key to Users)
vehicle_type (VARCHAR(50))
license_plate (VARCHAR(20))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Transactions

id (INT, Primary Key)
user_id (INT, Foreign Key to Users)
address (TEXT)
total_price (DECIMAL(10,2))
shipping_price (DECIMAL(10,2))
status (ENUM('PENDING', 'COMPLETED', 'CANCELED'))
payment (ENUM('MANUAL', 'ONLINE'))
payment_status (ENUM('PENDING', 'COMPLETED', 'FAILED'))
user_location_id (INT, Foreign Key to User_Locations)
kurir_id (INT, Foreign Key to Couriers)
rating (DECIMAL(3,2))
note (TEXT)
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Transaction_Items

id (INT, Primary Key)
transaction_id (INT, Foreign Key to Transactions)
product_id (INT, Foreign Key to Products)
quantity (INT)
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
User_Locations

id (INT, Primary Key)
customer_name (VARCHAR(100))
user_id (INT, Foreign Key to Users)
address (TEXT)
longitude (DECIMAL(10,8))
latitude (DECIMAL(10,8))
address_type (VARCHAR(50))
phone_number (VARCHAR(20))
created_at (TIMESTAMP)
updated_at (TIMESTAMP)

  Delivery
id (INT, Primary Key)
transaction_id (INT, Foreign Key to Transactions)
courier_id (INT, Foreign Key to Couriers)
delivery_status (ENUM('PENDING', 'IN_PROGRESS', 'DELIVERED', 'CANCELED'))
estimated_delivery_time (DATETIME)
actual_delivery_time (DATETIME)
created_at (TIMESTAMP)
updated_at (TIMESTAMP)
Catatan tambahan:

Tipe data TIMESTAMP digunakan untuk kolom created_at dan updated_at di semua tabel untuk konsistensi dalam pencatatan waktu.

ENUM digunakan untuk kolom dengan pilihan status yang tetap, seperti roles, order_status, payment_status, dll.

DECIMAL(10,2) digunakan untuk nilai uang (price, total_amount, dll.) untuk memastikan presisi dalam perhitungan keuangan.

TEXT digunakan untuk kolom yang mungkin berisi konten panjang seperti alamat dan deskripsi.

VARCHAR digunakan dengan panjang yang sesuai untuk data string dengan panjang yang dapat diprediksi.

INT digunakan untuk primary dan foreign keys, serta untuk nilai numerik seperti quantity dan points.

DECIMAL(10,8) digunakan untuk longitude dan latitude di tabel User_Locations untuk memastikan presisi lokasi geografis.

Semua foreign keys harus memiliki indeks untuk mengoptimalkan query join.

Kolom email di tabel Users ditandai sebagai UNIQUE untuk memastikan tidak ada duplikasi email.

Beberapa tabel mungkin memerlukan indeks tambahan tergantung pada pola query yang sering digunakan dalam aplikasi.

Pertimbangkan untuk menambahkan constraint CHECK pada kolom-kolom tertentu untuk memastikan integritas data (misalnya, memastikan quantity selalu positif).

Untuk meningkatkan keamanan, pastikan password di tabel Users disimpan dalam bentuk yang di-hash, bukan plain text.

Pertimbangkan untuk menggunakan UUID alih-alih INT untuk primary keys jika aplikasi diperkirakan akan sangat besar atau memerlukan distribusi data lintas server.

Tergantung pada kebutuhan aplikasi, Anda mungkin perlu menambahkan tabel tambahan untuk fitur seperti promo, kategori produk, atau riwayat perubahan harga.

Data Dictionary ini memberikan gambaran yang komprehensif tentang struktur database aplikasi Antarkanma. Pastikan untuk terus memperbarui dokumen ini seiring dengan perkembangan dan perubahan pada struktur database.
